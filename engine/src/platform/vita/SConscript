from logging import exception
import time
from spectre7 import utils
import os
from os.path import join
import sys
import zipfile, json
from PIL import Image
import io
from ftplib import FTP, error_perm
from multiprocessing import Process

RESOURCE_DIR = "resources/"
RESOURCE_TYPES = ("json", "png", "rescn")

PACK_VPK = False

Import("env")

if GetOption("run_tests"):
    print(f"Tests cannot be run when building for platform '{env.PLATFORM_NAME}'")
    exit()

if not "VITASDK" in os.environ:
    print("Please define VITASDK to point to your SDK path!")
    exit()
VITASDK = os.environ["VITASDK"]
if not VITASDK.endswith("/"):
    VITASDK += "/"

VITA_PLATFORM_PREFIX = "arm-vita-eabi"
VITA_TITLEID = "RETEST001" # Doesn't like underscores
VITA_IP = "192.168.10.105"
USB_DEVICE_DIR = "/run/media/" + os.environ["USER"] + "/"

def vitaCommand(cmd: str):
    os.system(f"echo {cmd} | nc {VITA_IP} 1338")

def ftpProcess(ftp: FTP, file, filename: str):
    try:
        ftp.storbinary("STOR " + os.path.basename(str(filename)), file)
    # Eboot upload will fail if the program is already running
    except error_perm as e:
        vitaCommand("destroy")
        time.sleep(0.5)
        ftp.storbinary("STOR " + os.path.basename(str(filename)), file)

def runProjectBinary(path: str):
    if not env.RUN_AFTER_BUILD:
        return
    
    if PACK_VPK:
        filename = env.VITA_VPK[0]
    else:
        filename = env.VITA_EBOOT[0]
    
    env.msg(f"Uploading {filename} to Vita")

    cancelled = False

    # Attempt FTP upload
    try:
        ftp = FTP()
        ftp.connect(VITA_IP, 1337)
        ftp.login()

        if PACK_VPK:
            ftp.cwd("ux0:HB_PROJECTS/" + env.PROJECT_NAME)
        else:
            ftp.cwd("ux0:app/" + VITA_TITLEID)
        
        file = open(str(filename), "rb")

        # Running in a process allows the upload to be cancelled by a KeyboardInterrupt
        proc = Process(target=ftpProcess, args=(ftp, file, filename))
        proc.start()
        proc.join()

        file.close()
        ftp.quit()
    
    except OSError as e:
        if str(e) != "[Errno 113] No route to host":
            raise e
        
        env.msg("FTP upload failed (no route to host), attempting USB upload...")

        # Attempt USB upload
        path = None
        device_path = None
        for device in os.listdir(USB_DEVICE_DIR):
            if PACK_VPK:
                path = os.path.join(USB_DEVICE_DIR, device, "HB_PROJECTS", env.PROJECT_NAME)
            else:
                path = os.path.join(USB_DEVICE_DIR, device, "app", VITA_TITLEID)

            if os.path.isdir(path):
                device_path = os.path.join(USB_DEVICE_DIR, device)
                break
                
            path = None
        
        if path is None:
            env.msg("USB upload failed, no valid device found")
            exit(-1)
        
        os.system(f"cp {filename} -T {os.path.join(path, os.path.basename(str(filename)))}")
        os.system(f"umount {device_path}")

    if cancelled:
        return

    vitaCommand("destroy")
    if PACK_VPK:
        vitaCommand("launch VITASHELL")
    else:
        vitaCommand("launch " + VITA_TITLEID)

env.runProjectBinary = runProjectBinary

env.Replace(
    ENV = {"PATH": sys.path + [VITASDK + "bin"]},
    CXX = VITA_PLATFORM_PREFIX + "-g++",
    AR = VITA_PLATFORM_PREFIX + "-ar",
    RANLIB = VITA_PLATFORM_PREFIX + "-ranlib",
)
env.Append(
    LINKFLAGS = ["-Wl,-q"],
    LIBPATH = VITASDK + VITA_PLATFORM_PREFIX + "/lib",
    CPPPATH = [VITASDK + VITA_PLATFORM_PREFIX + "/include"],

    CCFLAGS = ["-DVITA", "-Wno-psabi", "-fno-lto", "-fno-pic", "-fno-plt", "-DRLGL_IMPLEMENTATION", "-DGRAPHICS_API_OPENGL_ES2", "-DSUPPORT_MESH_GENERATION"],
    LIBS = [

        "SceHttp_stub",
        "SceSsl_stub",

        # "liblibGLESv2_stub",
        # "liblibIMGEGL_stub",

        "pib",
        "liblibScePiglet_stub",
        "SceShaccCg_stub",
        "taihen_stub",
        "SceAppMgr_stub",
        "SceLibKernel_stub",
        "SceSysmodule_stub",
        "SceIofilemgr_stub",
        "SceNetCtl_stub",
        "SceNet_stub",
        "SceGxm_stub",
        "SceDisplay_stub",
        "SceCtrl_stub",
        "SceTouch_stub",
        "pthread",
        "m",
    ]
)

# env.Append(
#     CPPPATH = ["include/raylib", "include/raylib-cpp"],
#     LIBS = ["raylib"]
# )

original_converter = env.convertSconsLine
def convertSconsLine(self, line: str, progress: float):
    if line.startswith("vita-mksfoex"):
        line = "Generating " + utils.format_colour(env.COLOURS["compile"]["colour"], line.split(" ")[4], env.COLOURS["compile"]["attrs"])
    elif line.startswith("vita-elf-create"):
        line = "Creating " + utils.format_colour(env.COLOURS["compile"]["colour"], line.split(" ")[2], env.COLOURS["compile"]["attrs"])
    elif line.startswith("vita-make-fself"):
        line = "Creating " + utils.format_colour(env.COLOURS["compile"]["colour"], line.split(" ")[2], env.COLOURS["compile"]["attrs"])
    # elif line.startswith("vita-pack-vpk"):
        # line = "Packing " + utils.format_colour(env.COLOURS["link"]["colour"], line.split(" ")[5], env.COLOURS["link"]["attrs"])
    return original_converter(line, progress)
env.AddMethod(convertSconsLine)

lib_dir = env.DIRECTORY + env.LIB_DIR

if GetOption("build_project"):

    vita_velf = env.Command(join(lib_dir, env.PROJECT_NAME + ".velf"), env.project_binary[0], "vita-elf-create $SOURCE $TARGET")
    Depends(vita_velf, env.project_binary)

    env.VITA_EBOOT = env.Command(lib_dir + "eboot.bin", vita_velf[0], "vita-make-fself $SOURCE $TARGET")
    Depends(env.VITA_EBOOT, vita_velf)

    vita_params = env.Command(lib_dir + "param.sfo", None, f"vita-mksfoex -s TITLE_ID={VITA_TITLEID} \"{env.PROJECT_NAME}\" $TARGET")

    def packVpk(target, source, env):

        env.msg("Packing VPK " + utils.format_colour(env.COLOURS["link"]["colour"], str(target[0]), env.COLOURS["link"]["attrs"]))
        os.system(f"vita-pack-vpk -s {source[0]} -b {source[1]} {target[0]}")

        env.msg("Adding resource files to VPK")

        i = 0
        package = zipfile.ZipFile(str(target[0]), mode="a")
        index = {}
        for root, dirnames, filenames in os.walk(env.DIRECTORY):
            root = root.removeprefix(env.DIRECTORY)
            if "/." in root or root.startswith("."):
                continue
            
            if root == "im":
                continue

            images = {}
            for file in filenames:
                ext = file.split(".")[-1]
                path = os.path.join(root, file)
                if ext == "json":

                    # Load, parse, and dump file content to remove formatting
                    f = open(path, "r")
                    string = json.dumps(json.loads(f.read()))
                    f.close()

                    package.writestr(os.path.join(RESOURCE_DIR, str(len(index)) + "." + ext), str.encode(string))
                    index[utils.formatPath(path)] = os.path.join(RESOURCE_DIR, str(len(index)) + "." + ext)
                elif ext == "png":
                    images[file.removesuffix("." + ext)] = path
                elif ext in RESOURCE_TYPES:
                    package.write(path, os.path.join(RESOURCE_DIR, str(len(index)) + "." + ext))
                    index[utils.formatPath(path)] = os.path.join(RESOURCE_DIR, str(len(index)) + "." + ext)

            if len(images) > 0:
                
                atlas = None

                for image in images.values():

                    im = Image.open(image)

                    if atlas is None:
                        pos = 1
                        atlas = Image.new("RGBA", (im.size[0] + 1, im.size[1]))
                    else:
                        pos = atlas.size[0] + 1

                        old = atlas
                        atlas = Image.new("RGBA", (old.size[0] + im.size[0] + 1, old.size[1]))
                        atlas.paste(old, (0, 0))

                    atlas.paste(im, (pos, 0))
                    index[utils.formatPath(image)] = [os.path.join(RESOURCE_DIR, str(i) + "." + ext), [
                        pos, 0, im.size[0], im.size[1]
                    ]]

                bytes = io.BytesIO()
                atlas.save(bytes, format='PNG')

                package.writestr(os.path.join(RESOURCE_DIR, str(i) + "." + ext), bytes.getvalue())
                i += 1

        package.writestr("resource_index.json", json.dumps(index, indent=1))
        package.close()

        for file in os.listdir(os.path.join(env.DIRECTORY, "build")):
            if ".vpk." in file:
                os.remove(os.path.join(env.DIRECTORY, "build/" + file))
    
    # packVpk([env.DIRECTORY + env.BUILD_DIR + env.PROJECT_NAME + ".vpk"], [vita_params[0], vita_eboot[0]], env)
    # exit()

    if PACK_VPK:
        env.VITA_VPK = env.Command(join(env.DIRECTORY + env.BUILD_DIR, env.PROJECT_NAME + ".vpk"), [vita_params[0], env.VITA_EBOOT[0]], packVpk)

        Depends(env.VITA_VPK, vita_params)
        Depends(env.FINISH_COMMAND, env.VITA_VPK)
    else:
        Depends(env.FINISH_COMMAND, env.VITA_EBOOT)